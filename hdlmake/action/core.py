#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 CERN
# Author: Pawel Szostek (pawel.szostek@cern.ch)
#
# This file is part of Hdlmake.
#
# Hdlmake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hdlmake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hdlmake.  If not, see <http://www.gnu.org/licenses/>.

import logging
import sys
import os
import os.path
import time

from .action import Action
import hdlmake.fetch as fetch
import hdlmake.new_dep_solver as dep_solver
from hdlmake.util import path as path_mod
from hdlmake.srcfile import VerilogFile, VHDLFile, NGCFile
from hdlmake.vlog_parser import VerilogPreprocessor

class ActionCore(Action):

    def fetch(self):
        top_module = self.get_top_module()
        logging.info("Fetching needed modules.")
        os.system(top_module.manifest_dict["fetch_pre_cmd"])
        self.fetch_all()
        os.system(top_module.manifest_dict["fetch_post_cmd"])
        logging.info("All modules fetched.")


    def clean(self):
        logging.info("Removing fetched modules..")
        remove_list = [m for m in self if m.source in [fetch.GIT, fetch.SVN] and m.isfetched]
        remove_list.reverse()  # we will remove modules in backward order
        if len(remove_list):
            for m in remove_list:
                logging.info("... clean: " + m.url + " [from: " + m.path + "]")
                m.remove_dir_from_disk()
        else:
            logging.info("There are no modules to be removed")
        logging.info("Modules cleaned.")


    def list_files(self):
        unfetched_modules = [m for m in self if not m.isfetched]
        for m in unfetched_modules:
            logging.warning("List incomplete, module %s has not been fetched!", m)
        file_set = self.build_file_set()
        file_list = dep_solver.make_dependency_sorted_list(file_set)
        files_str = [f.path for f in file_list]
        if self.env.options.delimiter == None:
            delimiter = "\n"
        else:
            delimiter = self.env.options.delimiter
        print(delimiter.join(files_str))


    def list_modules(self):

        def _convert_to_source_name(source_code):
            if source_code == fetch.GIT:
                return "git"
            elif source_code == fetch.SVN:
                return "svn"
            elif source_code == fetch.LOCAL:
                return "local"
            elif source_code == fetch.GITSUBMODULE:
                return "git_submodule"

        terse = self.env.options.terse
        for m in self:
            if not m.isfetched:
                logging.warning("Module not fetched: %s" % m.url)
                if not terse: print("# MODULE UNFETCHED! -> %s" % m.url)
            else:
                if not terse: print("# MODULE START -> %s" % m.url)
                if m.source in [fetch.SVN, fetch.GIT]:
                    if not terse: print("# * URL: "+m.url)
                if m.source in [fetch.SVN, fetch.GIT, fetch.LOCAL] and m.parent:
                    if not terse: print("# * The parent for this module is: %s" % m.parent.url)
                else:
                    if not terse: print("# * This is the root module")
                print("%s\t%s" % (path_mod.relpath(m.path), _convert_to_source_name(m.source)))
                if self.env.options.withfiles:
                    if not len(m.files):
                        if not terse: print("# * This module has no files")
                    else:
                        for f in m.files:
                            print("%s\t%s" % (path_mod.relpath(f.path), "file"))
                if not terse: print("# MODULE END -> %s" % m.url)
            if not terse: print("")


    def merge_cores(self):

        self._check_all_fetched_or_quit()
        logging.info("Merging all cores into one source file per language.")
        flist = self.build_file_set()
        base = self.env.options.dest

        file_header = (
            "\n\n\n\n"
            "------------------------------ WARNING -------------------------------\n"
            "-- This code has been generated by hdlmake --merge-cores option     --\n"
            "-- It is provided for your convenience, to spare you from adding    --\n"
            "-- lots of individual source files to ISE/Modelsim/Quartus projects --\n"
            "-- mainly for Windows users. Please DO NOT MODIFY this file. If you --\n"
            "-- need to change something inside, edit the original source file   --\n"
            "-- and re-genrate the merged version!                               --\n"
            "----------------------------------------------------------------------\n"
            "\n\n\n\n"
            )

        # Generate a VHDL file containing all the required VHDL files
        f_out = open(base+".vhd", "w")
        f_out.write(file_header)
        for vhdl in flist.filter(VHDLFile):
            f_out.write("\n\n---  File: %s ----\n" % vhdl.rel_path())
            f_out.write("---  Source: %s\n" % vhdl.module.url)
            if vhdl.module.revision:
                f_out.write("---  Revision: %s\n" % vhdl.module.revision)
            f_out.write("---  Last modified: %s\n" % time.ctime(os.path.getmtime(vhdl.path)))
            f_out.write(open(vhdl.rel_path(), "r").read()+"\n\n")
                #print("VHDL: %s" % vhdl.rel_path())
        f_out.close()

        # Generate a VHDL file containing all the required VHDL files
        f_out = open(base+".v", "w")
        f_out.write(file_header)
        for vlog in flist.filter(VerilogFile):
            f_out.write("\n\n//  File: %s\n" % vlog.rel_path())
            f_out.write("//  Source: %s\n" % vlog.module.url)
            if vlog.module.revision:
                f_out.write("//  Revision: %s\n" % vlog.module.revision)
            f_out.write("//  Last modified: %s\n" % time.ctime(os.path.getmtime(vlog.path)))
            vpp = VerilogPreprocessor()
            for include_path in vlog.include_dirs:
                vpp.add_path(include_path)
            vpp.add_path(vlog.dirname)
            f_out.write(vpp.preprocess(vlog.rel_path()))
        f_out.close()

        # Handling NGC files
        current_path = os.getcwd()
        for ngc in flist.filter(NGCFile):
            import shutil
            logging.info("copying NGC file: %s" % ngc.rel_path())
            shutil.copy(ngc.rel_path(), current_path)

        logging.info("Cores merged.")
