#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 - 2015 CERN
# Author: Pawel Szostek (pawel.szostek@cern.ch)
# Multi-tool support by Javier D. Garcia-Lasheras (javier@garcialasheras.com)
#
# This file is part of Hdlmake.
#
# Hdlmake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hdlmake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hdlmake.  If not, see <http://www.gnu.org/licenses/>.
#

from subprocess import Popen, PIPE
import string
import os
import platform
import logging

from hdlmake.util import path as path_mod
from hdlmake.action import ActionMakefile


IVERILOG_STANDARD_LIBS = ['std', 'ieee', 'ieee_proposed', 'vl', 'synopsys',
                          'simprim', 'unisim', 'unimacro', 'aim', 'cpld',
                          'pls', 'xilinxcorelib', 'aim_ver', 'cpld_ver',
                          'simprims_ver', 'unisims_ver', 'uni9000_ver',
                          'unimacro_ver', 'xilinxcorelib_ver', 'secureip']


class ToolIVerilog(ActionMakefile):

    def __init__(self):
        super(ToolIVerilog, self).__init__()

    def get_keys(self):
        tool_info = {
            'name': 'Icarus Verilog',
            'id': 'iverilog',
            'windows_bin': 'iverilog',
            'linux_bin': 'iverilog'
        }
        return tool_info

    def get_standard_libraries(self):
        return IVERILOG_STANDARD_LIBS

    def detect_version(self, path):
        is_windows = path_mod.check_windows()
        iverilog = Popen("iverilog -v 2>/dev/null| awk '{if(NR==1) print $4}'",
                         shell=True,
                         stdin=PIPE,
                         stdout=PIPE,
                         close_fds=not is_windows)
        version = iverilog.stdout.readlines()[0].strip()
        return version

    def supported_files(self, fileset):
        from hdlmake.srcfile import SourceFileSet
        sup_files = SourceFileSet()
        return sup_files

    def _print_sim_compilation(self, fileset, top_module):
        from hdlmake.srcfile import VerilogFile, VHDLFile, SVFile

        self.writeln("simulation:")

        self.writeln(
            "\t\techo \"# IVerilog command file, generated by HDLMake\" > run.command")

        for inc in top_module.get_include_dirs_list():
            self.writeln("\t\techo \"+incdir+" + inc + "\" >> run.command")

        for vl in fileset.filter(VerilogFile):
            self.writeln("\t\techo \"" + vl.rel_path() + "\" >> run.command")

        for vhdl in fileset.filter(VHDLFile):
            self.writeln("\t\techo \"" + vhdl.rel_path() + "\" >> run.command")

        for sv in fileset.filter(SVFile):
            self.writeln("\t\techo \"" + sv.rel_path() + "\" >> run.command")

        self.writeln("""
\t\tiverilog $(IVERILOG_OPT) -s $(TOP_MODULE) -o $(TOP_MODULE).vvp -c run.command

""")

    def _print_sim_options(self, top_module):
        if top_module.manifest_dict["iverilog_opt"]:
            iverilog_opt = top_module.manifest_dict["iverilog_opt"]
        else:
            iverilog_opt = ''
        iverilog_string = string.Template(
            """IVERILOG_OPT := ${iverilog_opt}\n""")
        self.writeln(iverilog_string.substitute(
            iverilog_opt=iverilog_opt))


    def _print_clean(self, top_module):
        self.writeln("""\
#target for cleaning all intermediate stuff
clean:
\t\trm -rf run.command ivl_vhdl_work

#target for cleaning final files
mrproper: clean
\t\trm -f *.vcd *.vvp
""")

