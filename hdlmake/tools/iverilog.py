#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 - 2015 CERN
# Author: Pawel Szostek (pawel.szostek@cern.ch)
# Multi-tool support by Javier D. Garcia-Lasheras (javier@garcialasheras.com)
#
# This file is part of Hdlmake.
#
# Hdlmake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hdlmake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hdlmake.  If not, see <http://www.gnu.org/licenses/>.
#

"""Module providing support for IVerilog (Icarus Verilog) simulator"""

import string

from .make_sim import ToolSim
from hdlmake.srcfile import VerilogFile, VHDLFile, SVFile


class ToolIVerilog(ToolSim):

    """Class providing the interface for Icarus Verilog simulator"""

    TOOL_INFO = {
        'name': 'Icarus Verilog',
        'id': 'iverilog',
        'windows_bin': 'iverilog',
        'linux_bin': 'iverilog'}

    STANDARD_LIBS = ['std', 'ieee', 'ieee_proposed', 'vl', 'synopsys',
                     'simprim', 'unisim', 'unimacro', 'aim', 'cpld',
                     'pls', 'xilinxcorelib', 'aim_ver', 'cpld_ver',
                     'simprims_ver', 'unisims_ver', 'uni9000_ver',
                     'unimacro_ver', 'xilinxcorelib_ver', 'secureip']

    HDL_FILES = [VerilogFile, VHDLFile, SVFile]

    CLEAN_TARGETS = {'clean': ["run.command", "ivl_vhdl_work"],
                     'mrproper': ["*.vcd", "*.vvp"]}

    def __init__(self):
        super(ToolIVerilog, self).__init__()
        self._tool_info.update(ToolIVerilog.TOOL_INFO)
        self._hdl_files.extend(ToolIVerilog.HDL_FILES)
        self._clean_targets.update(ToolIVerilog.CLEAN_TARGETS)

    def makefile_sim_compilation(self):
        """Generate compile simulation Makefile target for IVerilog"""
        fileset = self.fileset
        top_module = self.top_module

        self.writeln("simulation:")

        self.writeln("\t\techo \"# IVerilog command file,"
                     " generated by HDLMake\" > run.command")

        for inc in top_module.get_include_dirs_list():
            self.writeln("\t\techo \"+incdir+" + inc + "\" >> run.command")

        for vlog in fileset.filter(VerilogFile):
            self.writeln("\t\techo \"" + vlog.rel_path() + "\" >> run.command")

        for vhdl in fileset.filter(VHDLFile):
            self.writeln("\t\techo \"" + vhdl.rel_path() + "\" >> run.command")

        for svlog in fileset.filter(SVFile):
            self.writeln(
                "\t\techo \"" +
                svlog.rel_path(
                ) +
                "\" >> run.command")

        self.writeln("\t\tiverilog $(IVERILOG_OPT) -s $(TOP_MODULE)"
                     " -o $(TOP_MODULE).vvp -c run.command")

    def makefile_sim_options(self):
        """Print the IVerilog options to the Makefile"""
        top_module = self.top_module
        if top_module.manifest_dict["iverilog_opt"]:
            iverilog_opt = top_module.manifest_dict["iverilog_opt"]
        else:
            iverilog_opt = ''
        iverilog_string = string.Template(
            """IVERILOG_OPT := ${iverilog_opt}\n""")
        self.writeln(iverilog_string.substitute(
            iverilog_opt=iverilog_opt))
